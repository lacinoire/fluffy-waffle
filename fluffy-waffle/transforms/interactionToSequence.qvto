modeltype SEQUENCE uses sequence('http://www.mdsd.gar/sequence');
modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');

transformation interactionToSequence(in interaction : UML, out sequences_elem : SEQUENCE);

main() {
	log('Start', interaction);
	USER := 'user';
	interaction.objectsOfKind(Model).map transformModel();
}

property USER : String;	

mapping Model::transformModel() : SEQUENCE::Sequences {
	// global rumliegende Objekte: für alle Sequenzdiagramme kombiniert
	self.ownedElement[Interaction]->forEach(i) {
		objects += i.ownedElement[Lifeline].map transformLifelineToObject(result);
	};
	self.ownedElement[Interaction]->forEach(i) {
		i.ownedElement[StateInvariant].map transformStateInvariant(result);
	};
	self.ownedElement[Interaction]->forEach(i) {
		i.ownedElement[MessageOccurrenceSpecification]
			->select(mos : MessageOccurrenceSpecification | mos.message.sendEvent = mos)
			->collect(mos : MessageOccurrenceSpecification | mos.message)
			->select(m : Message | m.messageSort = MessageSort::synchCall)
			.map transformMessageToOperation(result);
	};
	self.ownedElement[Interaction]->forEach(i) {
		// einzelnes Sequenzdiagramm
		sequences += i.map transformModelToSequence();
	};
}

mapping Interaction::transformModelToSequence() : SEQUENCE::Sequence {
	init {
		result := self.map transformInteraction();
	}
}

mapping Interaction::transformInteraction() : SEQUENCE::Sequence {
	// fragment ist das einzige geordnete hier :)
	// uuuuund da sind keine Messages drin T_T
	// aber occurenceEvents... also holen wir uns darüber die messages ^^
	// über die Sends
	var messages := self.fragment[MessageOccurrenceSpecification]
		->select(mos : MessageOccurrenceSpecification | mos.message.sendEvent = mos)
		->collect(mos : MessageOccurrenceSpecification | mos.message)
		->select(m : Message | m.messageSort = MessageSort::synchCall);
		
	// mappe die gefundenen Messages :)
	communications += messages.map transformSynchCallMessage(self);

	// iterate throuh state invariants & messages to determine states
	var currentState : StateInvariant;
	var lastSystemCommunication : SystemCommunication;

	self.fragment->forEach(intf) {
		if (intf.oclIsTypeOf(StateInvariant)) {
			currentState := intf.oclAsType(StateInvariant);
			// set as post state for last communication if still necessary
			if (lastSystemCommunication.post_state_rcv = null) {
				lastSystemCommunication.post_state_rcv :=
					currentState.resolveoneIn(StateInvariant::transformStateInvariant);
			}
		} else if (intf.oclIsTypeOf(BehaviorExecutionSpecification)) {
			var message := intf.oclAsType(BehaviorExecutionSpecification).start
				.oclAsType(MessageOccurrenceSpecification).message;
			// did we map this message to a communication?
			if (messages->includes(message)) {
				var communication := message.resolveoneIn(Message::transformSynchCallMessage);
				// we only have states for System Communications
				if (communication.oclIsTypeOf(SystemCommunication)) {
					// set pre state to currently active state
					communication.oclAsType(SystemCommunication).pre_state_rcv :=
						currentState.resolveoneIn(StateInvariant::transformStateInvariant);
					// save SystemCommunication so we can set the post state later
					lastSystemCommunication := communication.oclAsType(SystemCommunication);
				};
			}
		}
	};
}

// we need normalization so all names can be made different by appending "_..."
// but still can keep name equality through uml names :D
helper String::normalizeName() : String {
	var new_name := self.substringBefore("_");
	if (new_name = "" or new_name = null) {
		new_name := self;
	};
	return new_name;
}

mapping Lifeline::transformLifelineToObject(inout result_sequences_elem : Sequences)
	: SEQUENCE::Object {
	init {
		var new_name := self.name.normalizeName();
		result := result_sequences_elem.objects
			->any(s : Object | s.name = new_name);
		if (result = null) {
			if (new_name = USER) {
				result := object UserObject {}
			} else {
				result := object SystemObject {}
			}
		}
	}
	name := new_name;
	result_sequences_elem.objects += result;
}

mapping Message::transformMessageToOperation(inout result_sequences_elem : Sequences)
	: SEQUENCE::Operation {
	init {
		var new_name := self.name.normalizeName();
		// check: was a Message with the same name already transformed?
		result := result_sequences_elem.operations
			->any(s : Operation | s.name = new_name);
		if (result = null) {
			result := object Operation {};
			result.name := new_name;
		}
	}
	result_sequences_elem.operations += result;
}

mapping StateInvariant::transformStateInvariant(inout result_sequences_elem : Sequences)
	: SEQUENCE::State {
	init {
		var new_name := self.name.normalizeName();
		result := result_sequences_elem.states
			->selectOne(s | s.name = new_name);
		
		if (result = null) {
			result := object State {};
			result.name := new_name;
		};
		result_sequences_elem.states += result;
	}
	
}

mapping Message::transformSynchCallMessage(in interaction_input : Interaction)
	: SEQUENCE::Communication {
	init {
	// WARUM hier covered ein Bag T_T
		if (self.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered
			->any(true).name.normalizeName() = USER) {
				result := object UserCommunication {};
		} else {
			result := object SystemCommunication {};
		}
	}
	operation := self.resolveoneIn(Message::transformMessageToOperation);
	
	// sender
	sender := self.sendEvent.oclAsType(MessageOccurrenceSpecification).covered
		->any(true).resolveoneIn(Lifeline::transformLifelineToObject, Object);
	
	// Return
	return_type := self.findMessageReturnType();
	
	if (result.oclIsTypeOf(UserCommunication)) {
		// receiver = user
		result.oclAsType(UserCommunication).receiver :=
			self.owner.oclAsType(Interaction).ownedElement[Lifeline]
			->any(l : Lifeline | l.name.normalizeName() = USER)
			.resolveoneIn(Lifeline::transformLifelineToObject, Object)
			.oclAsType(UserObject);
	} else {
		// receiver = sysobj
		result.oclAsType(SystemCommunication).receiver :=
			self.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered
			->any(true).resolveoneIn(Lifeline::transformLifelineToObject, Object)
			.oclAsType(SystemObject);
			
		// states are done later in one go
	}
}

helper Message::findMessageReturnType() : SEQUENCE::ReturnType {
	var receiveEvent := self.receiveEvent.oclAsType(MessageOccurrenceSpecification);
	// find the behaviour execution that is started by the receiveEvent
	var behavior := self.owner.ownedElement[BehaviorExecutionSpecification]
		->any(b : BehaviorExecutionSpecification | b.start = receiveEvent);
	if (behavior = null) {
		// This happens for "sync messages used as return messages"
		// these always have the return type void
		return object Void {};
	};
	if (behavior.finish.oclAsType(MessageOccurrenceSpecification).message.messageSort
		= MessageSort::reply) {
		return object Value {
			name := behavior.finish.oclAsType(MessageOccurrenceSpecification)
				.message.name.normalizeName();
		};
	} else {
		return object Void {};
	};
}
