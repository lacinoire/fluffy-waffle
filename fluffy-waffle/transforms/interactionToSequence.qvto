modeltype SEQUENCE uses sequence('http://www.mdsd.gar/sequence');
modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');

transformation interactionToSequence(in interaction : UML, out sequence : SEQUENCE);

main() {
	log('Start', interaction);
	USER := 'user';
	interaction.objectsOfKind(Model).map transformModel();
}

property USER : String;

mapping Model::transformModel() : SEQUENCE::Sequence {
	init {
		result := self.ownedElement[Interaction]->any(true).map transformInteraction();
	}
}

mapping Interaction::transformInteraction() : SEQUENCE::Sequence {
	objects := self.ownedElement[Lifeline].map transformLifeline();
	states := self.ownedElement[StateInvariant].map transformStateInvariant();
	communications += self.ownedElement[Message]
		->select( m : Message | m.messageSort = MessageSort::synchCall)
		.map transformSynchCallMessage();
}

mapping Lifeline::transformLifeline() : SEQUENCE::Object {
	init {
		if (self.name = USER) {
			result := object UserObject {}
		} else {
			result := object SystemObject {}
		}
	}
	name := self.name;
}

mapping StateInvariant::transformStateInvariant() : SEQUENCE::State {
	name := self.name;
}

mapping Message::transformSynchCallMessage() : SEQUENCE::Communication {
	init {
	// WARUM hier covered ein Bag T_T
		if (self.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered
			->any(true).name = USER) {
				result := object UserCommunication {};
		} else {
			result := object SystemCommunication {};
		}
	}
	operation := object Operation {
		name := self.name;
	};
	// sender
	sender := self.sendEvent.oclAsType(MessageOccurrenceSpecification).covered
		->any(true).resolveoneIn(Lifeline::transformLifeline, Object);
	
	// TODO Return
	
	if (result.oclIsTypeOf(UserCommunication)) {
		// receiver = user
		result.oclAsType(UserCommunication).receiver :=
			self.owner.oclAsType(Interaction).ownedElement[Lifeline]
			->any(l : Lifeline | l.name = USER)
			.resolveoneIn(Lifeline::transformLifeline, Object).oclAsType(UserObject);
	} else {
		// receiver = sysobj
		result.oclAsType(SystemCommunication).receiver :=
			self.sendEvent.oclAsType(MessageOccurrenceSpecification).covered
			->any(true).resolveoneIn(Lifeline::transformLifeline, Object)
			.oclAsType(SystemObject);
	}
}
	//disjuncts Message::transformMessageToUser,
	//Message::transformMessageToSystem;


