modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');
modeltype IO uses fluffy_io_automaton('http://www.example.org/fluffy_io_automaton');

transformation IoAutomatonToStateMachine(in io : IO, out state_machine : UML);

main() {
	log('Start', io);
	io.objectsOfType(AutomatonSequence).map AutomatonSequenceToModel(state_machine);
}

mapping IO::AutomatonSequence::AutomatonSequenceToModel(in model : UML) : List(StateMachine) {
	result += self.communicator[Automaton].map AutomatonToStateMachine(state_machine);
}

mapping IO::Automaton::AutomatonToStateMachine(in model : UML) : StateMachine {
	name := self.name;
	// first transform all states to simple states
	var big_region := object Region {};
	result.region += big_region;
	big_region.subvertex += self.states.map StateToSimpleState();
	
	var init_state := object Pseudostate {
		kind := PseudostateKind::initial;
		name := 'Entry Point';
	};
	var trans_from_init := object Transition {
		name := 'Entry Point -> First State';
		source := init_state;
		target := self.states->first().resolveoneIn(IO::State::StateToSimpleState);
	};
	big_region.subvertex += init_state;
	big_region.transition += trans_from_init;

	// now create the activity states in between
	self.states->forEach(state) {
		// first we have to collect all edges that have the same trigger
		var edges_for_triggers : Dict(String, Sequence(IO::Edge));
		state.outgoing->forEach(edge) {
			// schon in den triggers
			var set : Sequence(IO::Edge);
			if (edges_for_triggers->hasKey(edge.trigger.name)) {
				set := edges_for_triggers->get(edge.trigger.name);
			} else {
				set := object Sequence(IO::Edge) {};
			};
			set += edge;
			edges_for_triggers->put(edge.trigger.name, set);
		};

		// create activity nodes for all edges with same trigger
		edges_for_triggers->values()->forEach(edge_list) {
			var activeState := object State {
				name := edge_list->any(true).trigger.name + '_active';
			};
			big_region.subvertex += activeState;
			var inPoint := object Pseudostate {
				name := 'inPoint of ' + activeState.name;
				kind := PseudostateKind::entryPoint;
			};
			activeState.connectionPoint += inPoint;

			// edge into active state
			var simpleStartState := state.resolveoneIn(IO::State::StateToSimpleState);
			var transitionSimpleToActive := object Transition {
				name := simpleStartState.name + ' -> ' + inPoint.name;
				source := simpleStartState;
				target := inPoint;
				trigger += object Trigger {
					event := object CallEvent {
						name := edge_list->any(true).trigger.name + ' /';
					};
				};
			};
			big_region.transition += transitionSimpleToActive;
			
			var inner_region := object Region {};
			activeState.region += inner_region;
			
			var edge_index := -1; // we want to number out points therefore we count
			edge_list->forEach(edge) {
				edge_index := edge_index + 1;
				
				// go through and put in a complete run through
				// every time check if the desired state is already there
				var last_state : Vertex := inPoint;
				var guard_from_last_state : String := '-';
				
				edge.effect->forEach(effect) {
					// new state for request
					var new_state := effect.GetStateForEffect();
					
					// does this state already exists?
					var existing_state := inner_region.subvertex->any(s : Vertex
						| s.name = new_state.name
						and s.oclAsType(State).doActivity.name = new_state.doActivity.name);

					if (existing_state != null) {
						// take existing state instead of newly created one
						model.removeElement(new_state);
						new_state := existing_state.oclAsType(State);
						log('state ' + existing_state.name + ' already existed');
					} else {
						//log('state ' + new_state.name + ' created');
						inner_region.subvertex += new_state;
						// transition to new state
						var transitionToNewState := object Transition {
							name := last_state.name + ' -> ' + new_state.name;
							source := last_state;
							target := new_state;
							guard := object Constraint {
								specification := object OpaqueExpression {
									body := '[' + guard_from_last_state + ']';
								};
							};
						};
						inner_region.transition += transitionToNewState;
					};

					// set guard for next transitions correctly
					if (effect.returntype.oclIsTypeOf(Value)) {
						guard_from_last_state := 'check_' + effect.trigger.name + ' = '
							+ effect.returntype.oclAsType(Value).name;
					} else {
						guard_from_last_state := '-';
					};
					last_state := new_state;

				}; // finished going through all effects of the current edge

				// out edges from last state
				// first create pseudo states for exits and transitions to them
				var outPoint := object Pseudostate {
					name := 'outPoint ' + edge_index.toString() + ' of ' + activeState.name;
					kind := PseudostateKind::exitPoint;
				};
				activeState.connectionPoint += outPoint;

				// transition to outPoint
				var transitionToOutPoint := object Transition {
					name := last_state.name + ' -> ' + outPoint.name;
					source := last_state;
					target := outPoint;
					guard := object Constraint {
						specification := object OpaqueExpression {
							body := '[' + guard_from_last_state + ']';
						};
					};
				};
				inner_region.transition += transitionToOutPoint;
	
					// transition from outPoint
					var targetState := edge.target.resolveoneIn(IO::State::StateToSimpleState);
					var transitionFromOutPoint := object Transition {
					name := outPoint.name + ' -> ' + targetState.name;
					source := outPoint;
					target := targetState;
					effect := object OpaqueBehavior {
						if (edge.returntype.oclIsTypeOf(Value)) {
							body := '/ return ' + edge.returntype.oclAsType(Value).name;
						} else {
							body := '/ return void';
						}
					}
				};
				big_region.transition += transitionFromOutPoint;
			} // finish iteration over all edges
		}
	}
}

mapping IO::State::StateToSimpleState() : State {
	name := self.name + '_stable';
}

helper IO::Effect::GetStateForEffect() : State {
	return object State {
		name := self.trigger.name;
		doActivity := object OpaqueBehavior{
			if (self.returntype.oclIsTypeOf(Value)) {
				// value assignment
				name := 'check_' + self.trigger.name + ' := '
					+ self.receiver.name + '.' + self.trigger.name + ';';
			} else {
				// no return value saved
				name := self.receiver.name + '.' + self.trigger.name + ';';
			}
		};
	};
}