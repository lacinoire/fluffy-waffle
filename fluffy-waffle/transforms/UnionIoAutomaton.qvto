modeltype IO uses fluffy_io_automaton('http://www.example.org/fluffy_io_automaton');

transformation unionIoAutomaton(in ioIn : IO, out ioOut : IO);

main() {
	log('Start', ioIn);
	ioIn.objectsOfKind(IO::AutomatonSequence).map UnionIoAutomata();
}

mapping IO::AutomatonSequence::UnionIoAutomata() : IO::AutomatonSequence{
	communicator := self.communicator.map transformCommunicator();
	
	self.communicator[IO::Automaton]->forEach(aut){
		aut.resolveoneIn(IO::Communicator::transformCommunicator).oclAsType(IO::Automaton).states := aut.states.map transformState();
		aut.states->forEach(st){
			st.outgoing->forEach(edge){
				edge.transformEdge(st.resolveoneIn(IO::State::transformState));
			};
		};	
	}
}

mapping IO::State::transformState() : IO::State{
	name := self.name;
}

helper IO::Edge::transformEdge(inout state : IO::State){	
	// Check whether there is another edge already with the same trigger
	if(state.outgoing->select(ed | ed.trigger = self.trigger.resolveoneIn(IO::Trigger::transformTrigger))->isEmpty()){
		// We dont have another edge with the same trigger
		state.outgoing += object IO::Edge {
			target := self.target.resolveoneIn(IO::State::transformState);
			returntype := self.returntype.createReturnType();
			effect := self.effect.map transformEffect();
			trigger := self.trigger.resolveoneIn(IO::Trigger::transformTrigger);
		};
	// Check if we have the same edge already
	} else if (
		not state.outgoing->select(ed | 
			ed.trigger = self.trigger.resolveoneIn(IO::Trigger::transformTrigger)
			and ed.target = self.target.resolveoneIn(IO::State::transformState)
			// Compare the effects
			and self.effect->asOrderedSet()->compareTo(ed.effect)
			// Comparing the returntypes
			and ed.returntype.compareTo(self.returntype)
			)
			->isEmpty()
		){

		// We have another edge with the same trigger but same effect so we drop it
		--log('Doppelte Kante entfernt von Zustand', state.name);
		--log('Trigger:', self.trigger.name);
		
	} else {
		// Ok, now the edge is a new one, and now we can determine indeterminism
		if(not state.outgoing->select(ed | 
			ed.trigger = self.trigger.resolveoneIn(IO::Trigger::transformTrigger)
			and ed.target = self.target.resolveoneIn(IO::State::transformState)
			// If they have different returntypes
			and not ed.returntype.compareTo(self.returntype)
			// And they conflict
			and self.effect->asOrderedSet()->conflicts(ed.effect)
		
		)
			->isEmpty()){
			// Indeterminism
			log('Indeterminismus erkannt bei state', state.name);
			log('Trigger der Kante', self.trigger.name);
		};
		
		// Add the edge, even if it destoys determinism
		state.outgoing += object IO::Edge {
			target := self.target.resolveoneIn(IO::State::transformState);
			returntype := self.returntype.createReturnType();
			effect := self.effect.map transformEffect();
			trigger := self.trigger.resolveoneIn(IO::Trigger::transformTrigger);
		};
	};
}

mapping IO::Communicator::transformCommunicator() : IO::Communicator 
disjuncts
IO::User::transformUser,
IO::Automaton::transformAutomaton
{};

mapping IO::User::transformUser() : IO::User{
	name := self.name;
}

mapping IO::Automaton::transformAutomaton() : IO::Automaton{
	name := self.name;
	trigger := self.trigger.map transformTrigger();
	states := self.states.late resolveIn(IO::State::transformState);
}

mapping IO::Trigger::transformTrigger() : IO::Trigger {
	name := self.name;
}

helper OrderedSet(IO::Effect)::compareTo(in set : OrderedSet(IO::Effect)) : Boolean{
	var i : Integer := 0;
	if(self->size() != set->size()){
		return false;
	};
	
	// Check all Effects from front to back
	while (i < self->size() and i < set->size()){
		// Comparisaon happens via name
		if(not self->at(i).compareTo(set->at(i))){
			return false
		};
		i := i + 1;
	};
	
	return true;
}

helper OrderedSet(IO::Effect)::conflicts(in set : OrderedSet(IO::Effect)) : Boolean{
	var i : Integer := 0;

	if (self->size() = 0 or set->size() = 0){
		// One is empty, conflicting
		return true;
	};
	
	while (i < self->size() and i < set->size()){
		// Comparisaon happens via name
		if(self->at(i).receiver.name != set->at(i).receiver.name){
			log('Effects different', null);
			log(' Receiver 1', self->at(i).receiver.name);
			log(' Receiver 2', set->at(i).receiver.name);
			return true;
			
		} else if(self->at(i).trigger.name != set->at(i).trigger.name){
			log('Effects different', null);
			log(' Trigger 1', self->at(i).trigger.name);
			log(' Trigger 2', set->at(i).trigger.name);
			return true;
			
		} else if (not self->at(i).returntype.compareTo(set->at(i).returntype)){
			log('ReturnTypes different', null);
			log(' ReturnType 1', self->at(i).returntype.oclAsType(Value).name);
			log(' ReturnType 2', set->at(i).returntype.oclAsType(Value).name);
			return false;
		};
		i := i + 1;
	};
	
	return false;
}

helper IO::Effect::compareTo(in ef : IO::Effect) : Boolean {
	return (self.returntype.compareTo(ef.returntype) 
	and self.trigger = ef.trigger
	and self.receiver = ef.receiver);	
}

mapping IO::Effect::transformEffect() : IO::Effect {
	returntype := self.returntype.createReturnType();
	trigger := self.trigger.resolveoneIn(IO::Trigger::transformTrigger);
	receiver := self.receiver.resolveoneIn(IO::Communicator::transformCommunicator);
}

helper IO::ReturnType::compareTo(in rt : IO::ReturnType) : Boolean {
	return (rt.metaClassName() = self.metaClassName()
		and (
		// Either it is void or it has to have the same value
		rt.oclIsTypeOf(IO::Void) 
		or rt.oclAsType(IO::Value).name = self.oclAsType(IO::Value).name
		)
	);
}

helper IO::ReturnType::createReturnType() : IO::ReturnType {
	if(self.oclIsTypeOf(IO::Value)){
		var ret : IO::Value := object IO::Value {
			name := self.oclAsType(IO::Value).name;
		};
		return ret;
	} else {
		var ret : IO::Void := object IO::Void{
		};
		return ret;
	};
	return null;
}