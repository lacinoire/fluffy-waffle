modeltype BEHAVIOUR uses fluffy_behaviour('http://www.example.org/fluffy_behaviour');
modeltype IO uses fluffy_io_automaton('http://www.example.org/fluffy_io_automaton');

transformation behaviourToIoAutomaton(in behaviour : BEHAVIOUR, out io : IO);

main() {
	log('Start', behaviour);
	behaviour.objectsOfKind(BEHAVIOUR::BehaviourSequence).map BehaviourSequenceToAutomatonSequence();
}

// Mapping Return Types
mapping BEHAVIOUR::BehaviourSequence::BehaviourSequenceToAutomatonSequence() : IO::AutomatonSequence{
	self.state.map transformState();
	communicator := self._object.map transformObjectToCommunicator();
	
	self.behaviours->forEach(systemObjectBehaviour) {
		systemObjectBehaviour.behaviourblock->forEach(behaviourBlock) {
			var edge : IO::Edge := object IO::Edge {
				target := behaviourBlock.post_state.resolveoneIn(BEHAVIOUR::State::transformState);
				returntype := behaviourBlock._return.createReturnType();
				//Create the trigger here, give it to the object and reference it in the edge
				var trig : IO::Trigger;
				// If trigger already exists dont create it instead use it
				trigger := behaviourBlock.message_in.createTriggerFromOperation(systemObjectBehaviour.systemobject.resolveoneIn(BEHAVIOUR::Object::transformObjectToCommunicator).oclAsType(IO::Automaton));
				effect := behaviourBlock.outmessage.map 
					transformOutMessageToEffect(systemObjectBehaviour.systemobject.resolveoneIn(BEHAVIOUR::Object::transformObjectToCommunicator).oclAsType(IO::Automaton));
			};
			systemObjectBehaviour.systemobject.resolveoneIn(BEHAVIOUR::SystemObject::transformSystemObject).states += behaviourBlock.pre_state.resolveoneIn(BEHAVIOUR::State::transformState);
			behaviourBlock.pre_state.resolveoneIn(BEHAVIOUR::State::transformState).outgoing += edge;
		};
		
	};
	
	
}

mapping BEHAVIOUR::OutMessage::transformOutMessageToEffect(inout obj : IO::Automaton) : IO::Effect {
	returntype := self.returntype.createReturnType();
	trigger := self.operation.createTriggerFromOperation(obj);
	receiver := self.receiver.resolveoneIn(BEHAVIOUR::Object::transformObjectToCommunicator);
}


helper BEHAVIOUR::Operation::createTriggerFromOperation(inout obj : IO::Automaton) : IO::Trigger{
	var trigger : IO::Trigger;
	// If the trigger already exists in the object, just reference it
	if(obj.trigger->select(tr | tr.name = self.name)->isEmpty()){
		trigger := object IO::Trigger {
			name := self.name;
		};
		obj.trigger += trigger;
	} else {
		trigger := obj.trigger->any(tr | tr.name = self.name);
	};
	
	return trigger;
}


mapping BEHAVIOUR::Object::transformObjectToCommunicator() : IO::Communicator
disjuncts
BEHAVIOUR::UserObject::transformUserObject,
BEHAVIOUR::SystemObject::transformSystemObject
{}

mapping BEHAVIOUR::UserObject::transformUserObject() : IO::User{
	name := self.name;
}

mapping BEHAVIOUR::SystemObject::transformSystemObject() : IO::Automaton{
	name := self.name;
--	trigger := behaviour.objectsOfKind(BEHAVIOUR::SystemObjectBehaviour)
--	->select(bh | bh.systemobject = self).behaviourblock.message_in.map transformOperationToTrigger();
--	trigger += behaviour.objectsOfKind(BEHAVIOUR::SystemObjectBehaviour)
--	->select(bh | bh.systemobject = self).behaviourblock.outmessage.operation.map transformOperationToTrigger();
}

mapping BEHAVIOUR::State::transformState() : IO::State{
	name := self.name;
}

// Creates new ReturnTypes as a mapping does not work and also does not make sense here
helper BEHAVIOUR::ReturnType::createReturnType() : IO::ReturnType{
	if(self.oclIsTypeOf(BEHAVIOUR::Value)){
		var ret : IO::Value := object IO::Value {
			name := self.oclAsType(BEHAVIOUR::Value).name;
		};
		return ret;
	} else {
		var ret : IO::Void := object IO::Void{
		};
		return ret;
	};
	return null;
}

